name: Release on Version Change

on:
  push:
    branches:
      - master

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      version: ${{ steps.get_version.outputs.prop }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get previous commit module.json
        run: git show HEAD~1:module.json > old_module.json || echo '{}' > old_module.json

      - name: Extract version from current module.json
        id: get_version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "module.json"
          prop_path: "version"

      - name: Extract version from previous module.json
        id: get_old_version
        run: echo "OLD_VERSION=$(jq -r '.version // empty' old_module.json)" >> $GITHUB_ENV

      - name: Compare versions
        id: version_check
        run: |
          if [ "$OLD_VERSION" != "${{ steps.get_version.outputs.prop }}" ]; then
            echo "Version changed!"
            echo "changed=true" >> $GITHUB_ENV
          else
            echo "No version change detected."
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Cleanup old module
        run: rm -f old_module.json

  release:
    needs: check_version
    if: needs.check_version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version number
        id: get_version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "module.json"
          prop_path: "version"

      - name: Update module.json for release
        run: |
          jq '.manifest = "https://github.com/${{ github.repository }}/releases/latest/download/module.json" |
              .download = "https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.prop }}/module.zip"' module.json > temp_module.json
          mv temp_module.json module.json

      - name: Create ZIP Archive
        run: |
          zip -r module.zip . -x '*.git*' -x 'node_modules/*' -x '.github/*'

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.prop }}
          name: Release v${{ steps.get_version.outputs.prop }}
          body: "Automatically generated release for version ${{ steps.get_version.outputs.prop }}"
          draft: false
          prerelease: false
          files: |
            module.zip
            module.json
